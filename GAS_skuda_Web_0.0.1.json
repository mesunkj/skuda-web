{"files":[{"id":"9cc39889-961f-4765-958d-33adc5d099f7","name":"appsscript","type":"json","source":"{\n  \"timeZone\": \"Asia/Taipei\",\n  \"dependencies\": {},\n  \"exceptionLogging\": \"STACKDRIVER\",\n  \"runtimeVersion\": \"V8\",\n  \"webapp\": {\n    \"executeAs\": \"USER_DEPLOYING\",\n    \"access\": \"ANYONE_ANONYMOUS\"\n  }\n}"},{"id":"eedb1d85-03e0-4919-9b98-955760088d2b","name":"程式碼","type":"server_js","source":"// 全局狀態：盤面與步驟\nvar sudokuState \u003d {\n  qboard:[],\n  board: [],\n  answer:[],\n  steps: [],\n  stepIndex: 0\n};\n\n// \u003d\u003d\u003d 新增 doGet，返回首頁 (HTML) \u003d\u003d\u003d\nfunction doGet(e) {\n  return HtmlService.createHtmlOutputFromFile(\u0027H_Test\u0027)\n    .setTitle(\u0027Sudoku API Homepage\u0027)\n    .setXFrameOptionsMode(HtmlService.XFrameOptionsMode.ALLOWALL);\n}\nfunction include(File) {\n  return HtmlService.createHtmlOutputFromFile(File).getContent();\n};\n// --- API 主控制 ---\nfunction runQMain(query_str) {\n  Logger.log(\"後端 runQMain: query_str \u003d \" + query_str); // Trace\n  query_json \u003d JSON.parse(query_str)\n  action \u003d query_json[\"action\"]\n  sudokuState \u003d query_json[\"data\"]\n  if( sudokuState \u003d\u003d null ){Logger.log(\u0027object sudokuState is null\u0027); return {status: \"error\", message: \"object sudokuState is null\"}}\n  \n  switch (action) {\n    case \u0027init\u0027: return initSudoku();\n    case \u0027next\u0027: return nextStep();\n    case \u0027reset\u0027: return resetState();\n    default: return JSON.stringify({status: \"error\", message: \"Unknown query\"});\n  }\n}\n\n// 初始化數獨 (從前端傳入 board)\nfunction initSudoku() {\n\n  // 從前端取值 (由 google.script.run 傳入)\n  var board \u003d sudokuState.answer;\n  Logger.log(\"is alive for bord at stage of initSudoku:  \" +  board);\n  sudokuState.steps \u003d solveSudokuSteps(board);\n  if (sudokuState.steps.length \u003e 0) {\n        sudokuState.steps \u003d [];  // erase\n  }\n\n\n  sudokuState.stepIndex \u003d 0;\n  var f_str \u003d JSON.stringify({status: \"ok\", message: \"初始化完成\", board: board, trace: [sudokuState.steps, sudokuState.stepIndex], data :sudokuState  })\n  Logger.log( \u0027initSudoku f_str : \u0027 + f_str)\n  return f_str;\n}\n\n// 下一步\nfunction nextStep() {\n  Logger.log(\"nextStep: current step \u003d \" + sudokuState.stepIndex);\n  if (sudokuState.stepIndex \u003e\u003d sudokuState.steps.length) {\n    return JSON.stringify({status: \"done\", message: \"已完成所有步驟\", trace: \"No more steps\"});\n  }\n  var step \u003d sudokuState.steps[sudokuState.stepIndex++];\n  sudokuState.board[step.row][step.col] \u003d step.num;\n  Logger.log(\"nextStep: filled \" + step.num + \" at [\" + step.row + \",\" + step.col + \"]\");\n  return JSON.stringify({status: \"ok\", step: step, board: sudokuState.board, trace: \"填入 \" + step.num + \" at [\" + step.row + \",\" + step.col + \"]\", data :sudokuState });\n}\n\n// 重置\nfunction resetState() {\n  sudokuState.board \u003d createEmptyBoard();\n  sudokuState.steps \u003d [];\n  sudokuState.stepIndex \u003d 0;\n  return JSON.stringify({status: \"ok\", board: sudokuState.board, data :sudokuState });\n}\n\n// 接收前端盤面 (初始化前先設置)\nfunction setBoard(board) {\n  Logger.log(\u0027into setBoard at stage of init\u0027+ board)\n  sudokuState.board \u003d board;\n  return JSON.stringify({status: \"ok\",data:sudokuState});\n}\n\n// 建立空白盤面\nfunction createEmptyBoard() {\n  return Array.from({ length: 9 }, () \u003d\u003e Array(9).fill(0));\n}\n\n// --- 假的解題步驟 (僅示範用) ---\n// function solveSudokuSteps(board) {\n//   // TODO: 替換為真實數獨演算法\n//   return [\n//     {row: 0, col: 2, num: 4},\n//     {row: 1, col: 3, num: 6}\n//   ];\n// }\nfunction solveSudokuSteps(board) {\n  var steps \u003d [];\n  solve(board, steps);\n  return  steps;\n}\n\n// 回溯解 Sudoku，並記錄每一步填入\nfunction solve(board, steps) {\n  for (var row \u003d 0; row \u003c 9; row++) {\n    for (var col \u003d 0; col \u003c 9; col++) {\n      if (board[row][col] \u003d\u003d\u003d 0) {\n        for (var num \u003d 1; num \u003c\u003d 9; num++) {\n          if (isSafe(board, row, col, num)) {\n            board[row][col] \u003d num;\n            steps.push({row: row, col: col, num: num});  // 記錄步驟\n            if (solve(board, steps)) return true;\n            board[row][col] \u003d 0;\n          }\n        }\n        return false; // 無法填入數字\n      }\n    }\n  }\n  return true; // 已完成\n}\n\nfunction isSafe(board, row, col, num) {\n  for (var x \u003d 0; x \u003c 9; x++) {\n    if (board[row][x] \u003d\u003d\u003d num || board[x][col] \u003d\u003d\u003d num) return false;\n  }\n  var startRow \u003d row - row % 3;\n  var startCol \u003d col - col % 3;\n  for (var i \u003d 0; i \u003c 3; i++) {\n    for (var j \u003d 0; j \u003c 3; j++) {\n      if (board[i + startRow][j + startCol] \u003d\u003d\u003d num) return false;\n    }\n  }\n  return true;\n}\n\n"},{"id":"a659a3f9-bdda-4d0a-b114-5f1b2ed4d11e","name":"Homepage","type":"html","source":"\u003c!DOCTYPE html\u003e\n\u003chtml\u003e\n\u003chead\u003e\n  \u003cmeta charset\u003d\"UTF-8\"\u003e\n  \u003ctitle\u003eSudoku Homepage\u003c/title\u003e\n  \u003cscript src\u003d\"https://code.jquery.com/jquery-3.6.0.min.js\"\u003e\u003c/script\u003e\n  \u003cstyle\u003e\n    body { font-family: Arial, sans-serif; padding: 20px; }\n    table { border-collapse: collapse; margin-top: 10px; }\n    td { width: 40px; height: 40px; text-align: center; border: 1px solid #999; }\n    input { width: 35px; text-align: center; font-size: 16px; border: none; }\n    button { margin: 5px; padding: 10px 20px; }\n    #output { margin-top: 20px; background: #f5f5f5; padding: 10px; border-radius: 5px; }\n  \u003c/style\u003e\n\u003c/head\u003e\n\u003cbody\u003e\n  \u003ch1\u003eSudoku API 測試首頁\u003c/h1\u003e\n  \u003cdiv\u003e\n    \u003cbutton id\u003d\"btninit\"\u003e初始化解題\u003c/button\u003e\n    \u003cbutton id\u003d\"btnnext\"\u003e下一步\u003c/button\u003e\n    \u003cbutton id\u003d\"btnreset\"\u003e重置\u003c/button\u003e\n  \u003c/div\u003e\n\n  \u003ctable id\u003d\"sudoku-grid\"\u003e\u003c/table\u003e\n  \u003cdiv id\u003d\"output\"\u003e等待操作...\u003c/div\u003e\n\n  \u003cscript\u003e\n    var q_str \u003d \"\";\n\n    $(document).ready(function () {\n      // 生成 9x9 表格\n      createSudokuGrid();\n\n      // 初始化\n      $(\"#btninit\").click(function () {\n        var board \u003d readSudokuBoard();\n        google.script.run.withSuccessHandler(function(res) {\n          handleResponse(res, true);\n        }).setBoard(board);\n\n        runQuery(\u0027init\u0027);\n      });\n\n      // 下一步\n      $(\"#btnnext\").click(function () {\n        runQuery(\u0027next\u0027);\n      });\n\n      // 重置\n      $(\"#btnreset\").click(function () {\n        runQuery(\u0027reset\u0027);\n      });\n\n      function runQuery(action) {\n        $(\"#output\").text(\u0027處理中...\u0027);\n        google.script.run.withSuccessHandler(handleResponse).runQMain(action);\n      }\n\n      function handleResponse(responseS, refreshBoard\u003dfalse) {\n        let data;\n        try {\n          data \u003d JSON.parse(responseS);\n        } catch (e) {\n          $(\"#output\").text(\u0027伺服端回應不是 JSON: \u0027 + responseS);\n          return;\n        }\n\n        if (data.status \u003d\u003d\u003d \u0027ok\u0027 || data.status \u003d\u003d\u003d \u0027done\u0027) {\n          $(\"#output\").text(data.message || \"操作完成\");\n          if (data.board) updateSudokuGrid(data.board);\n        } else {\n          $(\"#output\").text(\"錯誤：\" + data.message);\n        }\n      }\n\n      // 生成 9x9 table\n      function createSudokuGrid() {\n        var table \u003d $(\"#sudoku-grid\");\n        table.empty();\n        for (var r \u003d 0; r \u003c 9; r++) {\n          var row \u003d $(\"\u003ctr\u003e\");\n          for (var c \u003d 0; c \u003c 9; c++) {\n            row.append(\"\u003ctd\u003e\u003cinput type\u003d\u0027text\u0027 maxlength\u003d\u00271\u0027\u003e\u003c/td\u003e\");\n          }\n          table.append(row);\n        }\n      }\n\n      // 讀取盤面數字\n      function readSudokuBoard() {\n        var board \u003d [];\n        $(\"#sudoku-grid tr\").each(function () {\n          var row \u003d [];\n          $(this).find(\"input\").each(function () {\n            var val \u003d parseInt($(this).val()) || 0;\n            row.push(val);\n          });\n          board.push(row);\n        });\n        return board;\n      }\n\n      // 更新盤面\n      function updateSudokuGrid(board) {\n        $(\"#sudoku-grid tr\").each(function (r) {\n          $(this).find(\"input\").each(function (c) {\n            $(this).val(board[r][c] || \u0027\u0027);\n          });\n        });\n      }\n    });\n  \u003c/script\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"},{"id":"3573cee3-3be4-4efd-821e-c7f8227b960c","name":"H_Test","type":"html","source":"\u003c!DOCTYPE html\u003e\n\u003chtml\u003e\n\u003chead\u003e\n  \u003cmeta charset\u003d\"UTF-8\"\u003e\n  \u003ctitle\u003eSudoku Homepage\u003c/title\u003e\n  \u003c!-- \u003cscript \n    src\u003d\"https://code.jquery.com/jquery-3.6.0.min.js\"\u003e\n    \n  \u003c/script\u003e --\u003e\n    \u003cscript src\u003d\"https://code.jquery.com/jquery-3.6.0.js\"\u003e\u003c/script\u003e\n    \u003cscript src\u003d\"https://code.jquery.com/ui/1.13.1/jquery-ui.js\"\u003e\u003c/script\u003e\n  \u003cstyle\u003e\n    body { font-family: Arial, sans-serif; padding: 20px; }\n    table { border-collapse: collapse; margin-top: 10px; }\n    td { width: 40px; height: 40px; text-align: center; border: 1px solid #999; }\n    input { width: 35px; text-align: center; font-size: 16px; border: none; }\n    button { margin: 5px; padding: 10px 20px; }\n    #output { margin-top: 20px; background: #f5f5f5; padding: 10px; border-radius: 5px; }\n    .highlight {  background-color: #ffe066; /* 黃色高亮 */\n                font-weight: bold;}\n\n  \u003c/style\u003e\n\u003c/head\u003e\n\u003cbody\u003e\n  \u003ch1\u003eSudoku API 測試首頁\u003c/h1\u003e\n  \u003cdiv\u003e\n    \u003cbutton id\u003d\"btninit\"\u003e初始化解題\u003c/button\u003e\n    \u003cbutton id\u003d\"btnreset\" disabled\u003d\"disabled\"\u003e顯示特定數字位置\u003c/button\u003e\n    \n    \u003cbutton id\u003d\"btnnext\"\u003e下一步\u003c/button\u003e\n    \u003cbutton id\u003d\"btnreset\"\u003e重置(還原題目)\u003c/button\u003e    \n    \u003cbutton id\u003d\"btnreset\"\u003e顯示特定數字位置\u003c/button\u003e\n  \u003c/div\u003e\n\n  \u003ctable id\u003d\"sudoku-grid\"\u003e\u003c/table\u003e\n  \u003cdiv id\u003d\"output\"\u003e等待操作...\u003c/div\u003e\n\n  \u003cscript\u003e\n    var q_str \u003d \"\";\n    var sudokuState \u003d {\n      qboard:[],\n      board: [],\n      answer:[],\n      steps: [],\n      stepIndex: 0\n    };\n\n    $(document).ready(function () {\n      // 生成 9x9 表格\n      createSudokuGrid();\n\n      // 預載數獨題目\n      const sampleBoard \u003d [\n        [5,3,0,0,7,0,0,0,0],\n        [6,0,0,1,9,5,0,0,0],\n        [0,9,8,0,0,0,0,6,0],\n        [8,0,0,0,6,0,0,0,3],\n        [4,0,0,8,0,3,0,0,1],\n        [7,0,0,0,2,0,0,0,6],\n        [0,6,0,0,0,0,2,8,0],\n        [0,0,0,4,1,9,0,0,5],\n        [0,0,0,0,8,0,0,7,9]\n      ];\n      updateSudokuGrid(sampleBoard);\n      function init_data_setting() data_maintain([],[],[])\n      function data_maintain(qboard,board,answer){\n        sudokuState.qboard \u003d qboard\n        sudokuState.board \u003d board\n        sudokuState.answer \u003d answer\n      }\n\n      // 初始化\n      $(\"#btninit\").click(function () {\n        //init qboard\n        if (sudokuState.qboard.length \u003e 0 \u0026\u0026 !isReNeedSolve(sudokuState.answer) ) {\n          var proceed \u003d Browser.msgBox(\u0027已有資料，是否要繼續？\u0027, Browser.Buttons.OK_CANCEL);\n          if (proceed \u003d\u003d\u003d \u0027cancel\u0027) return;  // 使用者按取消\n\n        }\n        init_data_setting()\n\n        var board \u003d readSudokuBoard();\n        if(! isReNeedSolve(board)) return \n        //save question board \u0026\u0026 init board \u0026\u0026  answer\n        data_maintain( board, board, board)\n\n        runQuery(\u0027init\u0027);\n      });\n      function isReNeedSolve(board){\n          var zeroThread \u003d 0;\n          for (var row \u003d 0; row \u003c 9; row++) {\n            for (var col \u003d 0; col \u003c 9; col++) {\n              if (board[row][col] \u003c\u003d 0 ) {zeroThread +\u003d1}\n          if(zeroThread \u003e\u003d 9*9) {\n            $(\"#output\").text(\u0027請輸入題目\u0027);\n            return false }\n          if( zeroThread \u003d\u003d 0 ) {\n            $(\"#output\").text(\u0027已經完成全部解題\u0027);\n            return false \n          return true\n\n      }\n\n      // 下一步\n      // 下一步按鈕\n      $(\"#btnnext\").click(function () {\n        let updated \u003d false;\n\n        // 先清除之前的 highlight\n        $(\"#sudoku-grid input\").removeClass(\"highlight\");\n\n        for (let r \u003d 0; r \u003c 9 \u0026\u0026 !updated; r++) {\n          for (let c \u003d 0; c \u003c 9 \u0026\u0026 !updated; c++) {\n            if (sudokuState.board[r][c] \u003d\u003d\u003d 0) {\n              // 用 answer 更新\n              sudokuState.board[r][c] \u003d sudokuState.answer[r][c];\n\n              // 更新 UI\n              const $cell \u003d $(\"#sudoku-grid tr\").eq(r).find(\"input\").eq(c);\n              $cell.val(sudokuState.answer[r][c]);\n              $cell.addClass(\"highlight\");\n\n              updated \u003d true;\n              $(\"#output\").text(`填入位置 (${r + 1}, ${c + 1}) \u003d ${sudokuState.answer[r][c]}`);\n            }\n          }\n        }\n\n        // 如果沒有更新，代表已完成\n        if (!updated) {\n          $(\"#output\").text(\"完成！所有空格已填完。\");\n        }\n      });\n\n\n\n\n\n\n\n\n\n      function isExistNext(board){\n          var zeroThread \u003d 0;\n          for (var row \u003d 0; row \u003c 9; row++) {\n            for (var col \u003d 0; col \u003c 9; col++) {\n              if (board[row][col] \u003c\u003d 0 ) {zeroThread +\u003d1}\n          if(zeroThread \u003e\u003d 9*9) {\n            $(\"#output\").text(\u0027請輸入題目\u0027);\n            return false }\n          if( zeroThread \u003d\u003d 0 ) {\n            $(\"#output\").text(\u0027已經完成全部解題\u0027);\n            return false \n          return true\n\n      }\n      // 重置\n      $(\"#btnreset\").click(function () {\n        // 1. 確認操作\n        if (!confirm(\"確定要重置盤面並回到原始題目嗎？\")) {\n          $(\"#output\").text(\"重置已取消\");\n          return;\n        }\n\n        // 2. 重置 board\n        // sudokuState.board \u003d JSON.parse(JSON.stringify(sudokuState.qboard));\n        //save question board \u0026\u0026 init board \u0026\u0026  answer\n        data_maintain( sudokuState.qboard, sudokuState.qboard, sudokuState.answer)\n        // 3. 更新 UI\n        updateSudokuGrid(sudokuState.board);\n\n        // 4. 清除 highlight 樣式\n        $(\"#sudoku-grid input\").removeClass(\"highlight\");\n\n        $(\"#output\").text(\"盤面已重置為原始題目\");\n      });\n\n\n      function runQuery(action) {\n        q_str_fr_JSON \u003d JSON.stringify( {\"action\": action, \"data\": sudokuState})\n        $(\"#output\").text(\u0027處理中...\u0027);\n        google.script.run.withSuccessHandler(handleResponse).runQMain(q_str_fr_JSON);\n      }\n\n      function handleResponse(responseS) {\n        let data;\n        try {\n          data \u003d JSON.parse(responseS);\n          sudokuState \u003d data.data\n          console.log(\"response init data:\", data);\n        } catch (e) {\n          $(\"#output\").text(\u0027伺服端回應不是 JSON: \u0027 + responseS);\n          return;\n        }\n        //check if get all solution, if not, show Fail \n        if (sudokuState.board.length \u003c\u003d0 || \n            sudokuState.qboard.length \u003c\u003d0 ||\n            sudokuState.answer.length \u003c\u003d0 ||\n            isExistNext(sudokuState.answer)){\n            $(\"#output\").text(\u0027Fail to 伺服端回應的解: \u0027 + responseS);\n            return;\n            }\n        if (data.status \u003d\u003d\u003d \u0027ok\u0027 || data.status \u003d\u003d\u003d \u0027done\u0027) {\n          let msg \u003d (data.message || \"操作完成0\");\n          // if (data.trace) msg +\u003d \"\\nTrace: \" + data.trace;  // 顯示 trace\n\n          $(\"#output\").text(msg);\n          if (data.board) updateSudokuGrid(sudokuState.board);\n        } else {\n          $(\"#output\").text(\"錯誤：\" + data.message);\n        }\n      }\n\n\n      // 生成 9x9 table\n      function createSudokuGrid() {\n        var table \u003d $(\"#sudoku-grid\");\n        table.empty();\n        for (var r \u003d 0; r \u003c 9; r++) {\n          var row \u003d $(\"\u003ctr\u003e\");\n          for (var c \u003d 0; c \u003c 9; c++) {\n            row.append(\"\u003ctd\u003e\u003cinput type\u003d\u0027text\u0027 maxlength\u003d\u00271\u0027\u003e\u003c/td\u003e\");\n          }\n          table.append(row);\n        }\n      }\n\n      // 讀取盤面數字\n      function readSudokuBoard() {\n        var board \u003d [];\n        $(\"#sudoku-grid tr\").each(function () {\n          var row \u003d [];\n          $(this).find(\"input\").each(function () {\n            var val \u003d parseInt($(this).val()) || 0;\n            row.push(val);\n          });\n          board.push(row);\n        });\n        return board;\n      }\n\n      // 更新盤面\n      function updateSudokuGrid(board) {\n        $(\"#sudoku-grid tr\").each(function (r) {\n          $(this).find(\"input\").each(function (c) {\n            $(this).val(board[r][c] || \u0027\u0027);\n          });\n        });\n      }\n    });\n  \u003c/script\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"}]}