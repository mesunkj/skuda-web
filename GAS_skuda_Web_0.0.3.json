{"files":[{"id":"9c91ceda-019c-44c5-8eeb-462efa598fd5","name":"appsscript","type":"json","source":"{\n  \"timeZone\": \"Asia/Taipei\",\n  \"dependencies\": {},\n  \"webapp\": {\n    \"executeAs\": \"USER_ACCESSING\",\n    \"access\": \"MYSELF\"\n  },\n  \"exceptionLogging\": \"STACKDRIVER\",\n  \"runtimeVersion\": \"V8\"\n}"},{"id":"606c071e-2378-441c-b4c1-c4e175935820","name":"程式碼","type":"server_js","source":"var sudokuState \u003d {\n  qboard: [],\n  board: [],\n  answer: []\n};\n\n// \u003d\u003d\u003d Web入口 \u003d\u003d\u003d\nfunction doGet() {\n  return HtmlService.createHtmlOutputFromFile(\u0027H_Test\u0027)\n    .setTitle(\u0027Sudoku API Homepage\u0027)\n    .setXFrameOptionsMode(HtmlService.XFrameOptionsMode.ALLOWALL);\n}\n\nfunction runQMain(query_str) {\n  Logger.log(\"runQMain: \" + query_str);\n  const query_json \u003d JSON.parse(query_str);\n  const action \u003d query_json[\"action\"];\n  sudokuState \u003d query_json[\"data\"];\n\n  switch (action) {\n    case \u0027init\u0027: return initSudoku();\n    default: return JSON.stringify({ status: \"error\", message: \"Unknown action\" });\n  }\n}\n\n// 初始化解題\nfunction initSudoku() {\n  sudokuState.answer \u003d JSON.parse(JSON.stringify(sudokuState.qboard));\n  solve(sudokuState.answer, []); // 求解\n  return JSON.stringify({ status: \"ok\", message: \"初始化完成\", data: sudokuState });\n}\n\n// 回溯解 Sudoku\nfunction solve(board, steps) {\n  for (let r \u003d 0; r \u003c 9; r++) {\n    for (let c \u003d 0; c \u003c 9; c++) {\n      if (board[r][c] \u003d\u003d\u003d 0) {\n        for (let n \u003d 1; n \u003c\u003d 9; n++) {\n          if (isSafe(board, r, c, n)) {\n            board[r][c] \u003d n;\n            if (solve(board, steps)) return true;\n            board[r][c] \u003d 0;\n          }\n        }\n        return false;\n      }\n    }\n  }\n  return true;\n}\n\nfunction isSafe(board, row, col, num) {\n  for (let x \u003d 0; x \u003c 9; x++) {\n    if (board[row][x] \u003d\u003d\u003d num || board[x][col] \u003d\u003d\u003d num) return false;\n  }\n  const startRow \u003d row - row % 3;\n  const startCol \u003d col - col % 3;\n  for (let i \u003d 0; i \u003c 3; i++) {\n    for (let j \u003d 0; j \u003c 3; j++) {\n      if (board[startRow + i][startCol + j] \u003d\u003d\u003d num) return false;\n    }\n  }\n  return true;\n}\n"},{"id":"472c59a0-7231-4aa9-a559-df31dd3c3572","name":"Homepage","type":"html","source":"\u003c!DOCTYPE html\u003e\n\u003chtml\u003e\n\u003chead\u003e\n  \u003cmeta charset\u003d\"UTF-8\"\u003e\n  \u003ctitle\u003eSudoku Homepage\u003c/title\u003e\n  \u003cscript src\u003d\"https://code.jquery.com/jquery-3.6.0.min.js\"\u003e\u003c/script\u003e\n  \u003cstyle\u003e\n    body { font-family: Arial, sans-serif; padding: 20px; }\n    table { border-collapse: collapse; margin-top: 10px; }\n    td { width: 40px; height: 40px; text-align: center; border: 1px solid #999; }\n    input { width: 35px; text-align: center; font-size: 16px; border: none; }\n    button { margin: 5px; padding: 10px 20px; }\n    #output { margin-top: 20px; background: #f5f5f5; padding: 10px; border-radius: 5px; }\n  \u003c/style\u003e\n\u003c/head\u003e\n\u003cbody\u003e\n  \u003ch1\u003eSudoku API 測試首頁\u003c/h1\u003e\n  \u003cdiv\u003e\n    \u003cbutton id\u003d\"btninit\"\u003e初始化解題\u003c/button\u003e\n    \u003cbutton id\u003d\"btnnext\"\u003e下一步\u003c/button\u003e\n    \u003cbutton id\u003d\"btnreset\"\u003e重置\u003c/button\u003e\n  \u003c/div\u003e\n\n  \u003ctable id\u003d\"sudoku-grid\"\u003e\u003c/table\u003e\n  \u003cdiv id\u003d\"output\"\u003e等待操作...\u003c/div\u003e\n\n  \u003cscript\u003e\n    var q_str \u003d \"\";\n\n    $(document).ready(function () {\n      // 生成 9x9 表格\n      createSudokuGrid();\n\n      // 初始化\n      $(\"#btninit\").click(function () {\n        var board \u003d readSudokuBoard();\n        google.script.run.withSuccessHandler(function(res) {\n          handleResponse(res, true);\n        }).setBoard(board);\n\n        runQuery(\u0027init\u0027);\n      });\n\n      // 下一步\n      $(\"#btnnext\").click(function () {\n        runQuery(\u0027next\u0027);\n      });\n\n      // 重置\n      $(\"#btnreset\").click(function () {\n        runQuery(\u0027reset\u0027);\n      });\n\n      function runQuery(action) {\n        $(\"#output\").text(\u0027處理中...\u0027);\n        google.script.run.withSuccessHandler(handleResponse).runQMain(action);\n      }\n\n      function handleResponse(responseS, refreshBoard\u003dfalse) {\n        let data;\n        try {\n          data \u003d JSON.parse(responseS);\n        } catch (e) {\n          $(\"#output\").text(\u0027伺服端回應不是 JSON: \u0027 + responseS);\n          return;\n        }\n\n        if (data.status \u003d\u003d\u003d \u0027ok\u0027 || data.status \u003d\u003d\u003d \u0027done\u0027) {\n          $(\"#output\").text(data.message || \"操作完成\");\n          if (data.board) updateSudokuGrid(data.board);\n        } else {\n          $(\"#output\").text(\"錯誤：\" + data.message);\n        }\n      }\n\n      // 生成 9x9 table\n      function createSudokuGrid() {\n        var table \u003d $(\"#sudoku-grid\");\n        table.empty();\n        for (var r \u003d 0; r \u003c 9; r++) {\n          var row \u003d $(\"\u003ctr\u003e\");\n          for (var c \u003d 0; c \u003c 9; c++) {\n            row.append(\"\u003ctd\u003e\u003cinput type\u003d\u0027text\u0027 maxlength\u003d\u00271\u0027\u003e\u003c/td\u003e\");\n          }\n          table.append(row);\n        }\n      }\n\n      // 讀取盤面數字\n      function readSudokuBoard() {\n        var board \u003d [];\n        $(\"#sudoku-grid tr\").each(function () {\n          var row \u003d [];\n          $(this).find(\"input\").each(function () {\n            var val \u003d parseInt($(this).val()) || 0;\n            row.push(val);\n          });\n          board.push(row);\n        });\n        return board;\n      }\n\n      // 更新盤面\n      function updateSudokuGrid(board) {\n        $(\"#sudoku-grid tr\").each(function (r) {\n          $(this).find(\"input\").each(function (c) {\n            $(this).val(board[r][c] || \u0027\u0027);\n          });\n        });\n      }\n    });\n  \u003c/script\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"},{"id":"0d6636d5-183e-49c1-ae15-50a2e4b02674","name":"H_Test","type":"html","source":"\u003c!DOCTYPE html\u003e\n\u003chtml\u003e\n\u003chead\u003e\n  \u003cmeta charset\u003d\"UTF-8\"\u003e\n  \u003ctitle\u003eSudoku Homepage\u003c/title\u003e\n  \u003cscript src\u003d\"https://code.jquery.com/jquery-3.6.0.min.js\"\u003e\u003c/script\u003e\n  \u003cstyle\u003e\n    body { font-family: Arial, sans-serif; padding: 20px; }\n    table { border-collapse: collapse; margin-top: 10px; }\n    td { width: 40px; height: 40px; text-align: center; border: 1px solid #999; }\n    input { width: 35px; text-align: center; font-size: 16px; border: none; }\n    button { margin: 5px; padding: 10px 20px; }\n    #output { margin-top: 20px; background: #f5f5f5; padding: 10px; border-radius: 5px; }\n    .highlight { background-color: #ffe066; font-weight: bold; }\n  \u003c/style\u003e\n\u003c/head\u003e\n\u003cbody\u003e\n  \u003ch1\u003eSudoku API 測試首頁\u003c/h1\u003e\n  \u003cdiv\u003e\n    \u003cbutton id\u003d\"btninit\"\u003e初始化解題\u003c/button\u003e\n    \u003cbutton id\u003d\"btnnext\"\u003e下一步\u003c/button\u003e\n  \n    \u003cbutton id\u003d\"btnreset\"\u003e重置(還原題目)\u003c/button\u003e\n    \u003cinput type\u003d\"number\" id\u003d\"numFill\" min\u003d\"1\" max\u003d\"81\" value\u003d\"3\" style\u003d\"width:60px;\"\u003e\n    \u003cbutton id\u003d\"btnfillN\"\u003e填入 N 筆答案\u003c/button\u003e\n    \u003cbutton id\u003d\"btnNewQ\"\u003e新題目\u003c/button\u003e\n\n  \u003c/div\u003e\n\n\n  \u003ctable id\u003d\"sudoku-grid\"\u003e\u003c/table\u003e\n  \u003cdiv id\u003d\"output\"\u003e等待操作...\u003c/div\u003e\n\u003cdiv style\u003d\"margin-top:20px;\"\u003e\n  \u003ctextarea id\u003d\"arrayEditor\" rows\u003d\"10\" cols\u003d\"60\" style\u003d\"font-family:monospace;\"\u003e\u003c/textarea\u003e\u003cbr\u003e\n  \u003cbutton id\u003d\"btnApplyArray\"\u003e更新盤面（由文字框 → 九宮格）\u003c/button\u003e\n  \u003cbutton id\u003d\"btnExtractArray\"\u003e同步至文字框（由九宮格 → 文字框）\u003c/button\u003e\n\u003c/div\u003e\n\n\n  \u003cscript\u003e\n    var sudokuState \u003d {\n      qboard: [],\n      board: [],\n      answer: []\n    };\n\n    $(document).ready(function () {\n      // 建立9x9盤面\n      createSudokuGrid();\n      // 初始化題目\n      const initBoard \u003d Array.from({ length: 9 }, () \u003d\u003e Array(9).fill(0));\n\n      const sampleBoard \u003d [\n        [5,3,0,0,7,0,0,0,0],\n        [6,0,0,1,9,5,0,0,0],\n        [0,9,8,0,0,0,0,6,0],\n        [8,0,0,0,6,0,0,0,3],\n        [4,0,0,8,0,3,0,0,1],\n        [7,0,0,0,2,0,0,0,6],\n        [0,6,0,0,0,0,2,8,0],\n        [0,0,0,4,1,9,0,0,5],\n        [0,0,0,0,8,0,0,7,9]\n      ];\n      updateSudokuGrid(sampleBoard);\n      sudokuState.qboard \u003d JSON.parse(JSON.stringify(sampleBoard));\n      sudokuState.board \u003d JSON.parse(JSON.stringify(sampleBoard));\n      function data_maintain(qboard,board,answer){\n        sudokuState.qboard \u003d qboard\n        sudokuState.board \u003d board\n        sudokuState.answer \u003d answer\n      };\n\n      // 將 2D 陣列更新至文字框\n      function updateTextAreaFromGrid() {\n        const board \u003d readSudokuBoard();\n        // 轉換成你要的格式：每列一行，不要縮排\n        const formatted \u003d \"[\" + board.map(row \u003d\u003e \"[\" + row.join(\",\") + \"]\").join(\",\\n \") + \"]\";\n        $(\"#arrayEditor\").val(formatted);\n      }\n\n\n      // 讀取文字框並套用至盤面\n      function applyTextAreaToGrid() {\n        try {\n          const content \u003d $(\"#arrayEditor\").val();\n          const board \u003d JSON.parse(content);\n          if (!Array.isArray(board) || board.length !\u003d\u003d 9 || board.some(row \u003d\u003e !Array.isArray(row) || row.length !\u003d\u003d 9)) {\n            throw new Error(\"格式錯誤，請確認為 9x9 二維陣列\");\n          }\n          sudokuState.board \u003d JSON.parse(JSON.stringify(board));\n          sudokuState.qboard \u003d JSON.parse(JSON.stringify(board));\n          updateSudokuGrid(board);\n          $(\"#output\").text(\"已從文字框套用至盤面\");\n        } catch (e) {\n          alert(\"錯誤：無法解析文字框內容\\n\" + e.message);\n        }\n      }\n      // 綁定按鈕事件\n      $(\"#btnExtractArray\").click(updateTextAreaFromGrid);\n      $(\"#btnApplyArray\").click(applyTextAreaToGrid);\n\n      // \u003d\u003d\u003d 初始化按鈕 \u003d\u003d\u003d\n      $(\"#btninit\").click(function () {\n        var board \u003d readSudokuBoard();\n        sudokuState.qboard \u003d JSON.parse(JSON.stringify(board));\n        sudokuState.board \u003d JSON.parse(JSON.stringify(board));\n        $(\"#output\").text(\"題目已初始化，請按下一步解題\");\n        runQuery(\u0027init\u0027); // 呼叫後端求解\n      });\n\n      //\u003d\u003d新題目 \u003d\u003d\n      $(\"#btnNewQ\").click(function () {\n        if (!confirm(\"確定要開始新題目嗎?\")) {\n          $(\"#output\").text(\"開始新題目已取消\");\n          return;\n        }\n        data_maintain([], [], []);\n        updateSudokuGrid(initBoard);\n        $(\"#sudoku-grid input\").removeClass(\"highlight\");\n        $(\"#output\").text(\"盤面已置為開始新題目\");\n      }); //← 這裡應該是這樣\n\n      // \u003d\u003d\u003d 下一步 \u003d\u003d\u003d\n      $(\"#btnnext\").click(function () {\n        $(\"#sudoku-grid input\").removeClass(\"highlight\");\n        let filled \u003d false;\n\n        for (let r \u003d 0; r \u003c 9 \u0026\u0026 !filled; r++) {\n          for (let c \u003d 0; c \u003c 9 \u0026\u0026 !filled; c++) {\n            if (sudokuState.board[r][c] \u003d\u003d\u003d 0) {\n              sudokuState.board[r][c] \u003d sudokuState.answer[r][c];\n              const $cell \u003d $(\"#sudoku-grid tr\").eq(r).find(\"input\").eq(c);\n              $cell.val(sudokuState.answer[r][c]);\n              $cell.addClass(\"highlight\");\n              $(\"#output\").text(`填入 (${r+1}, ${c+1}) \u003d ${sudokuState.answer[r][c]}`);\n              filled \u003d true;\n            }\n          }\n        }\n        if (!filled) $(\"#output\").text(\"完成！所有空格已填完。\");\n      });\n\n      // \u003d\u003d\u003d 重置 \u003d\u003d\u003d\n      $(\"#btnreset\").click(function () {\n        if (!confirm(\"確定要重置盤面並回到原始題目嗎？\")) {\n          $(\"#output\").text(\"重置已取消\");\n          return;\n        }\n        sudokuState.board \u003d JSON.parse(JSON.stringify(sudokuState.qboard));\n        updateSudokuGrid(sudokuState.board);\n        $(\"#sudoku-grid input\").removeClass(\"highlight\");\n        $(\"#output\").text(\"盤面已重置為原始題目\");\n      });\n      // 填入 N 筆答案\n      $(\"#btnfillN\").click(function () {\n        const n \u003d parseInt($(\"#numFill\").val()) || 1;\n        fillNAnswers(n);\n      });\n\n      function fillNAnswers(n) {\n        let filled \u003d 0;\n\n        // 先清除之前的 highlight\n        $(\"#sudoku-grid input\").removeClass(\"highlight\");\n\n        for (let r \u003d 0; r \u003c 9 \u0026\u0026 filled \u003c n; r++) {\n          for (let c \u003d 0; c \u003c 9 \u0026\u0026 filled \u003c n; c++) {\n            if (sudokuState.board[r][c] \u003d\u003d\u003d 0) {\n              // 填入答案\n              sudokuState.board[r][c] \u003d sudokuState.answer[r][c];\n\n              // 更新 UI\n              const $cell \u003d $(\"#sudoku-grid tr\").eq(r).find(\"input\").eq(c);\n              $cell.val(sudokuState.answer[r][c]);\n              $cell.addClass(\"highlight\");\n\n              filled++;\n            }\n          }\n        }\n\n        if (filled \u003d\u003d\u003d 0) {\n          $(\"#output\").text(\"已完成，沒有可填入的空格。\");\n        } else {\n          $(\"#output\").text(`已填入 ${filled} 個答案。`);\n        }\n      }\n\n\n\n\n      // \u003d\u003d\u003d 後端交互 \u003d\u003d\u003d\n      function runQuery(action) {\n        const q_str \u003d JSON.stringify({ action: action, data: sudokuState });\n        $(\"#output\").text(\"處理中...\");\n        google.script.run.withSuccessHandler(handleResponse).runQMain(q_str);\n      }\n\n      function handleResponse(responseS) {\n        try {\n          const data \u003d JSON.parse(responseS);\n          sudokuState \u003d data.data;\n          if (sudokuState.answer.length \u003d\u003d\u003d 0) {\n            $(\"#output\").text(\"後端未回傳解答\");\n            return;\n          }\n          $(\"#output\").text(\"解題初始化完成\");\n        } catch (e) {\n          $(\"#output\").text(\"伺服端回應不是 JSON: \" + responseS);\n        }\n      }\n\n      // \u003d\u003d\u003d 生成9x9表格 \u003d\u003d\u003d\n      function createSudokuGrid() {\n        const table \u003d $(\"#sudoku-grid\");\n        table.empty();\n        for (let r \u003d 0; r \u003c 9; r++) {\n          const row \u003d $(\"\u003ctr\u003e\");\n          for (let c \u003d 0; c \u003c 9; c++) {\n            row.append(\"\u003ctd\u003e\u003cinput type\u003d\u0027text\u0027 maxlength\u003d\u00271\u0027\u003e\u003c/td\u003e\");\n          }\n          table.append(row);\n        }\n      }\n\n      // \u003d\u003d\u003d 讀取盤面 \u003d\u003d\u003d\n      function readSudokuBoard() {\n        const board \u003d [];\n        $(\"#sudoku-grid tr\").each(function () {\n          const row \u003d [];\n          $(this).find(\"input\").each(function () {\n            const val \u003d parseInt($(this).val()) || 0;\n            row.push(val);\n          });\n          board.push(row);\n        });\n        return board;\n      }\n\n      // \u003d\u003d\u003d 更新盤面 \u003d\u003d\u003d\n      function updateSudokuGrid(board) {\n        $(\"#sudoku-grid tr\").each(function (r) {\n          $(this).find(\"input\").each(function (c) {\n            $(this).val(board[r][c] || \u0027\u0027);\n          });\n        });\n      }\n    });\n  \u003c/script\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"}]}